import numpy as np 

# General Constants
SOLVED_MASK = 'WWWWWWWWWGGGGGGGGGRRRRRRRRRBBBBBBBBBOOOOOOOOOYYYYYYYYY'

CLOCKWISE = True
ANTICLOCKWISE = False

FACE_NUM_TO_COLOUR = {0:'W',1:'G',2:'R',3:'B',4:'O',5:'Y'}
COLOUR_TO_FACE_NUM = {'W':0,'G':1,'R':2,'B':3,'O':4,'Y':5}
OPPOSITE_FACES = {0:5,1:3,2:4,3:1,4:2,5:0}
COLOURS = ['W', 'G', 'R', 'B', 'O', 'Y']

PLOTTING_COLOUR_MAP = {'W':'White','Y':'Yellow','B':'Blue','G':'Green','R':'Red','O':'Orange'}

COLOUR_TO_UNICODE = {'W':'‚¨ú','G':'üü©','R':'üü•','B':'üü¶','O':'üüß','Y':'üü®'}
ERROR_CHAR = '‚ùî'

CLOCKWISE_TURNS = [2,5,8,7,6,3,0,1]
ANTI_CLOCKWISE_TURNS = [6,3,0,1,2,5,8,7]

SPIRAL_ORDER = [0,1,2,5,8,7,6,3]

OPPOSITE_FACE_MAPPING = {'R': 'O', 'B': 'G', 'W': 'Y', 'Y': 'W', 'G': 'B', 'O': 'R'}
LEFT_FACE_MAPPING = {'R': 'G', 'G': 'O', 'O': 'B', 'B': 'R'}
RIGHT_FACE_MAPPING = {'R': 'B', 'B': 'O', 'O': 'G', 'G': 'R'}
RELATIVE_FACE_MAPPING = {'B':{'F':'R','R':'B','B':'L','L':'F'},'G':{'F':'L','R':'F','B':'R','L':'B'},'O':{'F':'B','R':'L','B':'F','L':'R'}}
POSSIBLE_ROTATIONS = ["D","U","F","L","R","B","D'","U'","F'","L'","R'","B'"]

STRING_ROTATION_MAPPINGS = {'F': [0, 1, 2, 3, 4, 5, 17, 14, 11, 9, 10, 45, 12, 13, 46, 15, 16, 47, 24, 21, 18, 25, 22, 19, 26, 23, 20, 6, 28, 29, 7, 31, 32, 8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 33, 30, 27, 48, 49, 50, 51, 52, 53], "F'": [0, 1, 2, 3, 4, 5, 27, 30, 33, 9, 10, 8, 12, 13, 7, 15, 16, 6, 20, 23, 26, 19, 22, 25, 18, 21, 24, 47, 28, 29, 46, 31, 32, 45, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 11, 14, 17, 48, 49, 50, 51, 52, 53], 'L': [44, 1, 2, 41, 4, 5, 38, 7, 8, 15, 12, 9, 16, 13, 10, 17, 14, 11, 0, 19, 20, 3, 22, 23, 6, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 51, 39, 40, 48, 42, 43, 45, 18, 46, 47, 21, 49, 50, 24, 52, 53], "L'": [18, 1, 2, 21, 4, 5, 24, 7, 8, 11, 14, 17, 10, 13, 16, 9, 12, 15, 45, 19, 20, 48, 22, 23, 51, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 6, 39, 40, 3, 42, 43, 0, 44, 46, 47, 41, 49, 50, 38, 52, 53], 'R': [0, 1, 20, 3, 4, 23, 6, 7, 26, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 47, 21, 22, 50, 24, 25, 53, 33, 30, 27, 34, 31, 28, 35, 32, 29, 8, 37, 38, 5, 40, 41, 2, 43, 44, 45, 46, 42, 48, 49, 39, 51, 52, 36], "R'": [0, 1, 42, 3, 4, 39, 6, 7, 36, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 21, 22, 5, 24, 25, 8, 29, 32, 35, 28, 31, 34, 27, 30, 33, 53, 37, 38, 50, 40, 41, 47, 43, 44, 45, 46, 20, 48, 49, 23, 51, 52, 26], 'B': [29, 32, 35, 3, 4, 5, 6, 7, 8, 2, 10, 11, 1, 13, 14, 0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 53, 30, 31, 52, 33, 34, 51, 42, 39, 36, 43, 40, 37, 44, 41, 38, 45, 46, 47, 48, 49, 50, 9, 12, 15], "B'": [15, 12, 9, 3, 4, 5, 6, 7, 8, 51, 10, 11, 52, 13, 14, 53, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 30, 31, 1, 33, 34, 2, 38, 41, 44, 37, 40, 43, 36, 39, 42, 45, 46, 47, 48, 49, 50, 35, 32, 29], 'D': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 42, 43, 44, 18, 19, 20, 21, 22, 23, 15, 16, 17, 27, 28, 29, 30, 31, 32, 24, 25, 26, 36, 37, 38, 39, 40, 41, 33, 34, 35, 51, 48, 45, 52, 49, 46, 53, 50, 47], "D'": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 18, 19, 20, 21, 22, 23, 33, 34, 35, 27, 28, 29, 30, 31, 32, 42, 43, 44, 36, 37, 38, 39, 40, 41, 15, 16, 17, 47, 50, 53, 46, 49, 52, 45, 48, 51], 'U': [6, 3, 0, 7, 4, 1, 8, 5, 2, 18, 19, 20, 12, 13, 14, 15, 16, 17, 27, 28, 29, 21, 22, 23, 24, 25, 26, 36, 37, 38, 30, 31, 32, 33, 34, 35, 9, 10, 11, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "U'": [2, 5, 8, 1, 4, 7, 0, 3, 6, 36, 37, 38, 12, 13, 14, 15, 16, 17, 9, 10, 11, 21, 22, 23, 24, 25, 26, 18, 19, 20, 30, 31, 32, 33, 34, 35, 27, 28, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]}

FACE_CENTER_POSITIONS = {
    "W": np.array([1.5, 1.5, 0]),
    "Y": np.array([1.5, 1.5, 3]),
    "R": np.array([0, 1.5, 1.5]),
    "O": np.array([3, 1.5, 1.5]),
    "G": np.array([1.5, 0, 1.5]),
    "B": np.array([1.5, 3, 1.5])
}

AXIS_MAP = {
    "W": [0, 0, 1], "Y": [0, 0, 1],
    "B": [0, 1, 0], "G": [0, 1, 0],
    "R": [1, 0, 0], "O": [1, 0, 0]
}

# gui.py
# Face normals: (name, [x, y, z])
FACE_NORMALS = [
    ("White",  [0, 0, -1]),   
    ("Yellow", [0, 0, 1]),  
    ("Blue",   [1, 0, 0]),  
    ("Green",  [-1, 0, 0]), 
    ("Red",    [0, -1, 0]), 
    ("Orange", [0, 1, 0]), 
]

# cube_scanner.py

FACE_TO_POSITION = {'White': [420, 20], 'Green': [346, 94], 'Red': [420, 94], 'Blue': [494, 94], 'Orange': [568, 94], 'Yellow': [420, 168]}

USUAL_COLOUR_VALUES = {
    'Red': (0, 0, 255),
    'Green': (0, 255, 0),
    'Blue': (255, 0, 0),
    'Yellow': (0, 255, 255),
    'Orange': (0, 165, 255),
    'White': (255, 255, 255),
}

COLOUR_VALUES = [
    ('Red', [109, 17, 20]),
    ('Green', [7, 108, 33]),
    ('Blue', [15, 37, 77]),
    ('Yellow', [149, 150, 50]),
    ('Orange', [203.5, 53, 33]),
    ('White', [133, 132, 132])
]

CENTER_ORDERINGS = {(0.5, 0.5, 0.0): 0, (0.5, 1.5, 0.0): 1, (0.5, 2.5, 0.0): 2, (1.5, 0.5, 0.0): 3, (1.5, 1.5, 0.0): 4, (1.5, 2.5, 0.0): 5, (2.5, 0.5, 0.0): 6, (2.5, 1.5, 0.0): 7, (2.5, 2.5, 0.0): 8, (0.5, 0.5, 3.0): 9, (0.5, 1.5, 3.0): 10, (0.5, 2.5, 3.0): 11, (1.5, 0.5, 3.0): 12, (1.5, 1.5, 3.0): 13, (1.5, 2.5, 3.0): 14, (2.5, 0.5, 3.0): 15, (2.5, 1.5, 3.0): 16, (2.5, 2.5, 3.0): 17, (0.0, 0.5, 0.5): 18, (0.0, 1.5, 0.5): 19, (0.0, 2.5, 0.5): 20, (0.0, 0.5, 1.5): 21, (0.0, 1.5, 1.5): 22, (0.0, 2.5, 1.5): 23, (0.0, 0.5, 2.5): 24, (0.0, 1.5, 2.5): 25, (0.0, 2.5, 2.5): 26, (3.0, 0.5, 0.5): 27, (3.0, 1.5, 0.5): 28, (3.0, 2.5, 0.5): 29, (3.0, 0.5, 1.5): 30, (3.0, 1.5, 1.5): 31, (3.0, 2.5, 1.5): 32, (3.0, 0.5, 2.5): 33, (3.0, 1.5, 2.5): 34, (3.0, 2.5, 2.5): 35, (0.5, 0.0, 0.5): 36, (1.5, 0.0, 0.5): 37, (2.5, 0.0, 0.5): 38, (0.5, 0.0, 1.5): 39, (1.5, 0.0, 1.5): 40, (2.5, 0.0, 1.5): 41, (0.5, 0.0, 2.5): 42, (1.5, 0.0, 2.5): 43, (2.5, 0.0, 2.5): 44, (0.5, 3.0, 0.5): 45, (1.5, 3.0, 0.5): 46, (2.5, 3.0, 0.5): 47, (0.5, 3.0, 1.5): 48, (1.5, 3.0, 1.5): 49, (2.5, 3.0, 1.5): 50, (0.5, 3.0, 2.5): 51, (1.5, 3.0, 2.5): 52, (2.5, 3.0, 2.5): 53}

# White Cross

# solved masks for each white center piece for each face
WHITE_CROSS_SOLVED_MASKS = {
                ('G','...WW.....G..G........................................'),
                ('R','....W..W...........R..R...............................'),
                ('B','....WW......................B..B......................'),
                ('O','.W..W................................O..O.............')
                }

# masks that can be solved with a single FU'RU or F'U'RU move
WHITE_CROSS_INSERTION_MASKS = {
                    ('G', '...GW.....W..G........................................', "FU'RU"),
                    ('G', '....W........G..W...............................G.....', "F'U'RU"),
                    ('R', '....W..R...........W..R...............................', "FU'RU"),
                    ('R', '....W.................R..W....................R.......', "F'U'RU"),
                    ('B', '....WB......................W..B......................', "FU'RU"),
                    ('B', '....W..........................B..W...............B...', "F'U'RU"),
                    ('O', '.O..W................................W..O.............', "FU'RU"),
                    ('O', '....W...................................O..W........O.', "F'U'RU")
                    }

# a combination of all the above masks, used for recursion
WHITE_CROSS_RECURSION_MASKS = {
                '...WW.....G..G........................................',
                '....W..W...........R..R...............................',
                '....WW......................B..B......................',
                '.W..W................................O..O.............',
                '...GW.....W..G........................................',
                '....W..R...........W..R...............................',
                '....WB......................W..B......................',
                '.O..W................................W..O.............',
                '....W..........................B..W...............B...',
                '....W........G..W...............................G.....',
                '....W.................R..W....................R.......',
                '....W...................................O..W........O.'
                }

## F2L Corners

# the masks for the correctly placed corner pieces
F2L_CORNERS_SOLVED_MASKS =  {
                ('R','.W.WWW.WW.G..G.....RR.R....BB..B.....O..O.............'),
                ('B','.WWWWW.W..G..G.....R..R.....BB.B....OO..O.............'),
                ('O','WW.WWW.W.GG..G.....R..R.....B..B.....OO.O.............'),
                ('G','.W.WWWWW..GG.G....RR..R.....B..B.....O..O.............')
                }

# the masks for inserting each corner piece, with 3 different insertion methods per piece
F2L_CORNERS_INSERTION_MASKS = {
                    ('RB1','.W.WWW.W..G..G.....R..R...B.B..B.R...O..O......W......'),
                    ('RB2','.W.WWW.W..G..G.....R..R...R.B..B.W...O..O......B......'),
                    ('RB3','.W.WWW.W..G..G.....R..R...W.B..B.B...O..O......R......'),
                    ('BO1','.W.WWW.W..G..G.....R..R.....B..B...O.O..O.B..........W'),
                    ('BO2','.W.WWW.W..G..G.....R..R.....B..B...B.O..O.W..........O'),
                    ('BO3','.W.WWW.W..G..G.....R..R.....B..B...W.O..O.O..........B'),
                    ('OG1','.W.WWW.W..G..G.O...R..R.....B..B.....O..O...G......W..'),
                    ('OG2','.W.WWW.W..G..G.W...R..R.....B..B.....O..O...O......G..'),
                    ('OG3','.W.WWW.W..G..G.G...R..R.....B..B.....O..O...W......O..'),
                    ('GR1','.W.WWW.W..G..G...R.R..R.G...B..B.....O..O....W........'),
                    ('GR2','.W.WWW.W..G..G...G.R..R.W...B..B.....O..O....R........'),
                    ('GR3','.W.WWW.W..G..G...W.R..R.R...B..B.....O..O....G........')
                    }

CORNER_INSERTION_ALGORITHMS = {1:"FLDDL'F'", 2:"R'D'R", 3:"FDF'"}

## F2L Middle Pieces

F2L_MIDDLE_SOLVED_MASKS = {
                ('RB','WWWWWWWWWGGG.G....RRR.RR...BBBBB....OOO.O.............'),
                ('RG','WWWWWWWWWGGG.GG...RRRRR....BBB.B....OOO.O.............'),
                ('BO','WWWWWWWWWGGG.G....RRR.R....BBB.BB...OOOOO.............'),
                ('OG','WWWWWWWWWGGGGG....RRR.R....BBB.B....OOO.OO............')
                }

F2L_MIDDLE_INSERTION_MASKS = {
                ('RB','WWWWWWWWWGGG.G....RRR.R..R.BBB.B....OOO.O.....B.......'),
                ('RG','WWWWWWWWWGGG.G....RRR.R..R.BBB.B....OOO.O.....G.......'),
                ('BR','WWWWWWWWWGGG.G....RRR.R....BBB.B..B.OOO.O.........R...'),
                ('BO','WWWWWWWWWGGG.G....RRR.R....BBB.B..B.OOO.O.........O...'),
                ('OB','WWWWWWWWWGGG.G....RRR.R....BBB.B....OOO.O..O........B.'),
                ('OG','WWWWWWWWWGGG.G....RRR.R....BBB.B....OOO.O..O........G.'),
                ('GO','WWWWWWWWWGGG.G..G.RRR.R....BBB.B....OOO.O.......O.....'),
                ('GR','WWWWWWWWWGGG.G..G.RRR.R....BBB.B....OOO.O.......R.....')
                }

LEFT_FACE_INSERTION_ALGORITHM = "DLD'L'D'F'DF"
RIGHT_FACE_INSERTION_ALGORITHM = "D'R'DRDFD'F'"

## Yellow Cross

YELLOW_CROSS_SOLVED_MASK = 'WWWWWWWWWGGGGGG...RRRRRR...BBBBBB...OOOOOO....Y.YYY.Y.'
YELLOW_CROSS_INSERTION_ALGORITHM = "FLDL'D'F'"

# masks for L and line shapes, with face to perform algorithm from
YELLOW_L_MASKS = {
            ('O','WWWWWWWWWGGGGGG...RRRRRR...BBBBBB...OOOOOO....Y.YY....'),
            ('G','WWWWWWWWWGGGGGG...RRRRRR...BBBBBB...OOOOOO....Y..YY...'),
            ('B','WWWWWWWWWGGGGGG...RRRRRR...BBBBBB...OOOOOO......YY..Y.'),    
            ('R','WWWWWWWWWGGGGGG...RRRRRR...BBBBBB...OOOOOO.......YY.Y.')        
            }

YELLOW_LINE_MASKS = {
            ('R','WWWWWWWWWGGGGGG...RRRRRR...BBBBBB...OOOOOO......YYY...'),
            ('B','WWWWWWWWWGGGGGG...RRRRRR...BBBBBB...OOOOOO....Y..Y..Y.'),    
            }

## Yellow Edges

YELLOW_EDGES_SOLVED_MASK = 'WWWWWWWWWGGGGGG.G.RRRRRR.R.BBBBBB.B.OOOOOO.O..Y.YYY.Y.'

YELLOW_EDGES_INSERTION_ALGORITHM = "LDL'DLDDL'D"

YELLOW_CORNERS_INSERTION_ALGORITHM = "DLD'R'DL'D'R"

# Final Step

FINAL_STEP_ALGORITHM = "L'U'LU"